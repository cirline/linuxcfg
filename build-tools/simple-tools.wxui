#!/usr/bin/env python

import wx
import os

class main_window(wx.Frame):
    """ overide __init___ """
    def __init__(self, parent, title):
        wx.Frame.__init__(self, parent, title = title)

        self.evt = evt_cls(self)

        """ top sizer """
        self.sizer_top = wx.BoxSizer(wx.VERTICAL)
        self.SetSizer(self.sizer_top)

        """ line: system """
        self.sizer_system = wx.BoxSizer(wx.HORIZONTAL)
        self.sizer_top.Add(self.sizer_system, 0, wx.EXPAND)
        # restart adb
        btn_restart_adb = wx.Button(self, -1, "restart adb")
        self.sizer_system.Add(btn_restart_adb, 1, wx.EXPAND)
        self.Bind(wx.EVT_BUTTON, self.evt_restart_adb, btn_restart_adb)
        # adb net
        btn = wx.Button(self, -1, "adbnet")
        self.sizer_system.Add(btn, 1, wx.EXPAND)
        self.Bind(wx.EVT_BUTTON, self.evt.adb_net, btn)
        # adb net connect
        btn = wx.Button(self, -1, "adbconn")
        self.sizer_system.Add(btn, 1, wx.EXPAND)
        self.Bind(wx.EVT_BUTTON, self.evt.adb_net_connect, btn)

        """ line1: android key """
        self.sizer_l1 = wx.BoxSizer(wx.HORIZONTAL)
        self.sizer_top.Add(self.sizer_l1, 0, wx.EXPAND)
        btn_power = wx.Button(self, -1, "power")
        self.sizer_l1.Add(btn_power, 1, wx.EXPAND)
        btn_home = wx.Button(self, -1, "home")
        self.sizer_l1.Add(btn_home, 1, wx.EXPAND)
        btn_back = wx.Button(self, -1, "back")
        self.sizer_l1.Add(btn_back, 1, wx.EXPAND)

        """ line: android swipe """
        self.sizer_swipe = wx.BoxSizer(wx.HORIZONTAL)
        self.sizer_top.Add(self.sizer_swipe, 0, wx.EXPAND)
        tip = wx.StaticText(self, label = "swp:")
        self.sizer_swipe.Add(tip, 1, wx.EXPAND)
        self.btn_swipe_up = wx.Button(self, wx.ID_UP, "mvu")
        self.btn_swipe_down = wx.Button(self, wx.ID_DOWN, "mvd")
        self.btn_swipe_left = wx.Button(self, wx.ID_FORWARD, "mvl")
        self.btn_swipe_right = wx.Button(self, wx.ID_BACKWARD, "mvr")
        self.sizer_swipe.Add(self.btn_swipe_up, 1, wx.EXPAND)
        self.sizer_swipe.Add(self.btn_swipe_down, 1, wx.EXPAND)
        self.sizer_swipe.Add(self.btn_swipe_left, 1, wx.EXPAND)
        self.sizer_swipe.Add(self.btn_swipe_right, 1, wx.EXPAND)
        self.Bind(wx.EVT_BUTTON, self.evt.swipe, self.btn_swipe_up)
        self.Bind(wx.EVT_BUTTON, self.evt.swipe, self.btn_swipe_down)
        self.Bind(wx.EVT_BUTTON, self.evt.swipe, self.btn_swipe_left)
        self.Bind(wx.EVT_BUTTON, self.evt.swipe, self.btn_swipe_right)

        """ action """
        self.Bind(wx.EVT_BUTTON, self.evt_power, btn_power)
        self.Bind(wx.EVT_BUTTON, self.evt_home, btn_home)
        self.Bind(wx.EVT_BUTTON, self.evt_back, btn_back)

        """ line: hw command """
        # navigation ico
        self.sizer_hwc = wx.BoxSizer(wx.HORIZONTAL)
        self.sizer_top.Add(self.sizer_hwc, 0, wx.EXPAND)
        tip = wx.StaticText(self, label = "nav:")
        self.sizer_hwc.Add(tip, 1, wx.EXPAND)

        self.btn_nav = []
        for i in range(0, 4):
            btn = wx.Button(self, -1, "n" + str(i))
            self.sizer_hwc.Add(btn, 1, wx.EXPAND)
            self.Bind(wx.EVT_BUTTON, self.evt_nav, btn)
            self.btn_nav.append(btn)
        # other
        self.sizer_hwother = wx.BoxSizer(wx.HORIZONTAL)
        self.sizer_top.Add(self.sizer_hwother, 0, wx.EXPAND)
        tip = wx.StaticText(self, label = "ohr:")
        self.sizer_hwother.Add(tip, 1, wx.EXPAND)
        self.btn_ohr_pwd = wx.Button(self, -1, "pwd")
        self.sizer_hwother.Add(self.btn_ohr_pwd, 1, wx.EXPAND)
        self.Bind(wx.EVT_BUTTON, self.evt_hwother, self.btn_ohr_pwd)

        """ menu bar """
        mbar = self.init_menubar()
        self.SetMenuBar(mbar)

        """ status bar """
        self.statusbar = self.init_statusbar()

    def show_tip(self, tip):
        self.statusbar.SetStatusText(tip)

    def init_statusbar(self):
        bar = self.CreateStatusBar()

        return bar

    def insert_menu_item(self, menu, itemid, text, desc, func):
        item = menu.Append(itemid, text, desc)
        if func != None:
            self.Bind(wx.EVT_MENU, func, item)

    def init_menubar(self):
        tool_menu = wx.Menu()
        self.insert_menu_item(tool_menu, wx.ID_HELP, "Help\tCtrl+H", "help", self.evt.help)
        self.insert_menu_item(tool_menu, wx.ID_CLOSE, "Close\tCtrl+X", "close", self.evt.close)

        key_menu = wx.Menu()
        self.insert_menu_item(key_menu, wx.NewId(), "Power\tP", "power key", self.evt_power)
        self.insert_menu_item(key_menu, wx.NewId(), "Home\tM", "home key", self.evt.home)

        swipe_menu = wx.Menu()
        self.insert_menu_item(swipe_menu, wx.ID_UP, "Up\tJ", "swipe up", self.evt.swipe)
        self.insert_menu_item(swipe_menu, wx.ID_DOWN, "Down\tK", "swipe down", self.evt.swipe)
        self.insert_menu_item(swipe_menu, wx.ID_FORWARD, "Forward/Left\tH", "swipe left", self.evt.swipe)
        self.insert_menu_item(swipe_menu, wx.ID_BACKWARD, "Backward/Right\tL", "swipe right", self.evt.swipe)

        menubar = wx.MenuBar()
        menubar.Append(tool_menu, "tool")
        menubar.Append(key_menu, "Key")
        menubar.Append(swipe_menu, "Swipe")

        return menubar

    def evt_hwother(self, event):
        if event.GetId() == self.btn_ohr_pwd.GetId():
            self.show_tip("input password")
            os.system("hw pwd")

    def evt_nav(self, event):
        for i in range(0, 4):
            if event.GetId() == self.btn_nav[i].GetId():
                btn = self.btn_nav[i]
                command = "hw " + btn.GetLabel()
                self.show_tip(command)
                os.system(command)
                break

    def evt_restart_adb(self, event):
        os.system("adb kill-server")
        os.system("sudo adb start-server")
        self.show_tip("restart adb finish.")

    def evt_power(self, event):
        os.system("kp")
        self.show_tip("power")

    def evt_home(self, event):
        os.system("kh")
        self.show_tip("home")

    def evt_back(self, event):
        os.system("kb")
        self.show_tip("back")

class evt_cls:
    def __init__(self, parent):
        self.parent = parent

    def show_tip(self, tip):
        self.parent.show_tip(tip)

    def home(self, event):
        os.system("kh")
        self.show_tip("home")

    def help(self, event):
        help_msg = \
                "P\t\tPower\n"\
                "M\t\tHome\n"\
                "K\t\tUp\n"\
                "J\t\tDown\n"\
                "H\t\tBackward\Left\n"\
                "L\t\tForward\Right\n"\
                "C-X\t\tExit\n"\
                "C-H\t\tHelp\n"
        dlg = wx.MessageDialog(self.parent, help_msg, "Shortcut", wx.OK)
        dlg.ShowModal()
        dlg.Destroy()

    def close(self, event):
        print "bye."
        self.parent.Close()

    """ swipe event """
    def swipe(self, event):
        if event.GetId() == wx.ID_UP:
            os.system("mvu")
            self.show_tip("up")
        elif event.GetId() == wx.ID_DOWN:
            os.system("mvd")
            self.show_tip("down")
        elif event.GetId() == wx.ID_FORWARD:
            os.system("mvl")
            self.show_tip("left")
        elif event.GetId() == wx.ID_BACKWARD:
            os.system("mvr")
            self.show_tip("right")
        else:
            self.show_tip("unknown swipe")

    """ adb """
    def adb_net(self, event):
        rc = os.popen("adb shell ip addr | awk -F ' ' '/wlan/' | awk -F ' ' '/inet/{print $2}' | awk -F '/' '{print $1}'")
        ip = rc.read()
        ip = ip.replace("\n", "")
        os.system("adb tcpip 8680")
        self.parent.adb_ip = ip
        print "ip:", self.parent.adb_ip

    def adb_net_connect(self, event):
        command = "adb connect " + self.parent.adb_ip + ":8680"
        print "command:", command
        os.system(command)
        os.system("adb devices")

    def test(self, event):
        print self
        print self.parent
        print event

""" main """
app = wx.App(False)
frame = main_window(None, "simple tools")
frame.Centre()
frame.Show()

app.MainLoop()

